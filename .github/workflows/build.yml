name: Build Docker Image

on:
  schedule:
    # Every 1 hour
    - cron: "0 * * * *"
  workflow_dispatch:
    inputs:
      git_tag:
        description: Git Tag To Release From. Last Git Tag Is Used If Omitted
        required: false
      force:
        type: boolean
        description: Force Build Image
        required: false
        default: false

jobs:
  build:
    name: Build Client Push
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
        include:
          - registry: docker.io
            image: docker.io/miles170/notify_push
            username: DOCKERHUB_USERNAME
            password: DOCKERHUB_TOKEN
          - registry: ghcr.io
            image: ghcr.io/miles170/notify_push
            username: GHCR_USERNAME
            password: GHCR_TOKEN
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: nextcloud/notify_push
          fetch-depth: 0

      - name: Get git info
        id: git-info
        run: |
          tag='${{ github.event.inputs.git_tag }}'
          if [[ -z "${tag}" ]]; then
            tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          fi
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          git checkout $tag
          echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Prepare env
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Check Docker image
        id: inspect
        run: |
          if [[ '${{ github.event.inputs.force }}' == 'true' ]]; then
            echo 'Skip hash verification'
            echo 'build=true' >> $GITHUB_OUTPUT
            exit 0
          fi
          image=${{ matrix.image }}:latest
          if ! docker pull $image; then
            echo 'build=true' >> $GITHUB_OUTPUT
            exit 0
          fi
          hash=$(docker inspect --format '{{ index .Config.Labels "org.opencontainers.image.revision" }}' $image)
          if [[ "${hash}" != '${{ steps.git-info.outputs.hash }}' ]]; then
            echo "${hash} != ${{ steps.git-info.outputs.hash }}"
            echo 'build=true' >> $GITHUB_OUTPUT
          fi

      - name: Docker meta
        if: ${{ steps.inspect.outputs.build == 'true' }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}

      - name: Login to Container Registry
        if: ${{ steps.inspect.outputs.build == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry }}
          username: ${{ secrets[matrix.username] }}
          password: ${{ secrets[matrix.password] }}

      - name: Set up QEMU
        if: ${{ steps.inspect.outputs.build == 'true' }}
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: ${{ steps.inspect.outputs.build == 'true' }}
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        if: ${{ steps.inspect.outputs.build == 'true' }}
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ matrix.image }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        if: ${{ steps.inspect.outputs.build == 'true' }}
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        if: ${{ steps.inspect.outputs.build == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        if: ${{ steps.inspect.outputs.build == 'true' }}
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Container Registry
        if: ${{ steps.inspect.outputs.build == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry }}
          username: ${{ secrets[matrix.username] }}
          password: ${{ secrets[matrix.password] }}

      - name: Set up Docker Buildx
        if: ${{ steps.inspect.outputs.build == 'true' }}
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        if: ${{ steps.inspect.outputs.build == 'true' }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          labels: |
            org.opencontainers.image.title=notify_push
            org.opencontainers.image.description=Update notifications for nextcloud clients
            org.opencontainers.image.source=https://github.com/nextcloud/notify_push
            org.opencontainers.image.version=${{ steps.git-info.outputs.tag }}
            org.opencontainers.image.revision=${{ steps.git-info.outputs.hash }}
            type=semver,pattern={{ steps.git-info.outputs.tag }}

      - name: Create manifest list and push
        if: ${{ steps.inspect.outputs.build == 'true' }}
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ matrix.image }}@sha256:%s ' *)

      - name: Inspect image
        if: ${{ steps.inspect.outputs.build == 'true' }}
        run: |
          docker buildx imagetools inspect ${{ matrix.image }}:${{ steps.meta.outputs.version }}